// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2DKD84fhiXnEWTgFaJV5wH
// Component: zPyj8nxzJ0PL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: rGQpmhEfHPE7/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2DKD84fhiXnEWTgFaJV5wH/projectcss
import sty from "./PlasmicAddPayment.module.css"; // plasmic-import: zPyj8nxzJ0PL/css

createPlasmicElementProxy;

export type PlasmicAddPayment__VariantMembers = {};
export type PlasmicAddPayment__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddPayment__VariantsArgs;
export const PlasmicAddPayment__VariantProps = new Array<VariantPropType>();

export type PlasmicAddPayment__ArgsType = {};
type ArgPropType = keyof PlasmicAddPayment__ArgsType;
export const PlasmicAddPayment__ArgProps = new Array<ArgPropType>();

export type PlasmicAddPayment__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  form?: Flex__<typeof FormWrapper>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultAddPaymentProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddPayment__RenderFunc(props: {
  variants: PlasmicAddPayment__VariantsArgs;
  args: PlasmicAddPayment__ArgsType;
  overrides: PlasmicAddPayment__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "exsbeLS9T2Xj686vyg2LYN",
        opId: "07d6f30c-8690-4c7c-961c-99c7b8dc0eac",
        userArgs: {},
        cacheKey: `plasmic.$.07d6f30c-8690-4c7c-961c-99c7b8dc0eac.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx =>
                (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    data: {
                      sourceId: "exsbeLS9T2Xj686vyg2LYN",
                      opId: "6d34c965-0a89-48de-aa82-5d2819d561e5",
                      userArgs: {},
                      cacheKey: `plasmic.$.${(() => {
                        try {
                          return "getSchema";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}.$.6d34c965-0a89-48de-aa82-5d2819d561e5.$.`,
                      invalidatedKeys: null,
                      roleId: null
                    },
                    dataFormItems: (() => {
                      const __composite = [
                        {
                          key: "id",
                          inputType: "Number",
                          fieldId: "id",
                          label: "id",
                          name: "id",
                          hidden: null
                        },
                        {
                          key: "created_at",
                          inputType: "Text",
                          fieldId: "created_at",
                          label: "created_at",
                          name: "created_at",
                          hidden: null
                        },
                        {
                          key: "userid",
                          inputType: null,
                          fieldId: "userid",
                          label: null,
                          name: "userid",
                          options: null,
                          noStyle: null,
                          rules: null
                        },
                        {
                          key: "paid_amount",
                          inputType: "Number",
                          fieldId: "paid_amount",
                          label: "paid_amount",
                          name: "paid_amount",
                          rules: null
                        }
                      ];
                      __composite["0"]["hidden"] = true;
                      __composite["1"]["hidden"] = true;
                      __composite["2"]["inputType"] = "Select";
                      __composite["2"]["label"] = "Customer";
                      __composite["2"]["options"] =
                        $queries.componentData.data.map(item => ({
                          label: item.name,
                          value: item.id
                        }));
                      __composite["2"]["noStyle"] = false;
                      __composite["2"]["rules"] = [
                        { ruleType: "required", message: "required" }
                      ];

                      __composite["3"]["rules"] = [
                        { ruleType: "required", message: "Required" }
                      ];

                      return __composite;
                    })(),

                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "simplified",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["defaultSubmit"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "exsbeLS9T2Xj686vyg2LYN",
                                opId: "f0575a96-9f32-491c-9ea3-79cc897a0271",
                                userArgs: {
                                  variables: [$state.form.value]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["defaultSubmit"] != null &&
                        typeof $steps["defaultSubmit"] === "object" &&
                        typeof $steps["defaultSubmit"].then === "function"
                      ) {
                        $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                      }

                      $steps["goToPayments"] = true
                        ? (() => {
                            const actionArgs = { destination: `/payments` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPayments"] != null &&
                        typeof $steps["goToPayments"] === "object" &&
                        typeof $steps["goToPayments"].then === "function"
                      ) {
                        $steps["goToPayments"] = await $steps["goToPayments"];
                      }
                    },
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: (
                      <AntdButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___43Vwh
                          )}
                        >
                          {"Submit"}
                        </div>
                      </AntdButton>
                    ),
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    />
                  );
                })()
              }
            </DataCtxReader__>
          </PageLayout>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__o9Nfd
            )}
          >
            {"https://static1.plasmic.app/form.svg"}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "form", "button"],
  pageLayout: ["pageLayout", "form", "button"],
  form: ["form", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  form: typeof FormWrapper;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddPayment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddPayment__VariantsArgs;
    args?: PlasmicAddPayment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddPayment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAddPayment__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddPayment__ArgProps,
          internalVariantPropNames: PlasmicAddPayment__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddPayment__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddPayment";
  } else {
    func.displayName = `PlasmicAddPayment.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2DKD84fhiXnEWTgFaJV5wH"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAddPayment = Object.assign(
  // Top-level PlasmicAddPayment renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    form: makeNodeComponent("form"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAddPayment
    internalVariantProps: PlasmicAddPayment__VariantProps,
    internalArgProps: PlasmicAddPayment__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAddPayment;
/* prettier-ignore-end */
